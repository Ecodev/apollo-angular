(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{251:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),c=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=c(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},y=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),y=r,b=u["".concat(i,".").concat(y)]||u[y]||d[y]||a;return t?o.a.createElement(b,p(p({ref:n},l),{},{components:t})):o.a.createElement(b,p({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=y;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},77:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var r=t(1),o=t(8),a=(t(0),t(251)),i=["components"],p={title:"TypeScript",sidebar_title:"Using TypeScript with GraphQL and Angular and making everything type safe"},s={unversionedId:"development-and-testing/using-typescript",id:"development-and-testing/using-typescript",isDocsHomePage:!1,title:"TypeScript",description:"As your application grows, you may find it helpful to include a type system to",source:"@site/docs/development-and-testing/using-typescript.md",slug:"/development-and-testing/using-typescript",permalink:"/docs/development-and-testing/using-typescript",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/development-and-testing/using-typescript.md",version:"current",sidebar:"docs",previous:{title:"Reactive variables",permalink:"/docs/local-state/reactive-variables"},next:{title:"Testing",permalink:"/docs/development-and-testing/testing"}},l=[{value:"Operation result",id:"operation-result",children:[]},{value:"Options",id:"options",children:[]},{value:"Other usage",id:"other-usage",children:[]}],c={toc:l};function u(e){var n=e.components,t=Object(o.a)(e,i);return Object(a.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"As your application grows, you may find it helpful to include a type system to\nassist in development. Apollo supports type definitions for TypeScript system.\nBoth ",Object(a.b)("inlineCode",{parentName:"p"},"@apollo/client")," and ",Object(a.b)("inlineCode",{parentName:"p"},"apollo-angular")," ship with definitions in their npm\npackages, so installation should be done for you after the libraries are\nincluded in your project."),Object(a.b)("h2",{id:"operation-result"},"Operation result"),Object(a.b)("p",null,"The most common need when using type systems with GraphQL is to type the results\nof an operation. Given that a GraphQL server's schema is strongly typed, we can\neven generate TypeScript definitions automaticaly using a tool like\n",Object(a.b)("a",{parentName:"p",href:"https://graphql-code-generator.com/docs/plugins/typescript-apollo-angular"},"Graphql Code Generator"),". In these docs\nhowever, we will be writing result types manually."),Object(a.b)("p",null,"Since the result of a query will be sent to the component or service, we want to\nbe able to tell our type system the shape of it. Here is an example setting\ntypes for an operation using TypeScript:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Apollo, gql } from 'apollo-angular';\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\nconst HERO_QUERY = gql<Response>`\n  query GetCharacter($episode: Episode!) {\n    hero(episode: $episode) {\n      name\n      id\n      friends {\n        name\n        id\n        appearsIn\n      }\n    }\n  }\n`;\n\n@Component({ ... })\nclass AppComponent {\n  response\n  constructor(apollo: Apollo) {\n    apollo.watchQuery({\n      query: HERO_QUERY,\n      variables: { episode: 'JEDI' }\n    })\n      .valueChanges\n      .subscribe(result => {\n        console.log(result.data.hero); // no TypeScript errors\n      });\n  }\n}\n")),Object(a.b)("p",null,"Without specyfing a Generic Type for ",Object(a.b)("inlineCode",{parentName:"p"},"Apollo.watchQuery"),", TypeScript would throw\nan error saying that ",Object(a.b)("inlineCode",{parentName:"p"},"hero")," property does not exist in ",Object(a.b)("inlineCode",{parentName:"p"},"result.data")," object (it\nis an ",Object(a.b)("inlineCode",{parentName:"p"},"Object")," by default)."),Object(a.b)("h2",{id:"options"},"Options"),Object(a.b)("p",null,"To make integration between Apollo and Angular even more statically typed you\ncan define the shape of variables (in query, watchQuery and mutate methods).\nHere is an example setting the type of variables:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Apollo, gql } from 'apollo-angular';\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\ntype Variables = {\n  episode: string\n};\n\nconst HERO_QUERY = gql<Response, Variables>`\n  query GetCharacter($episode: Episode!) {\n    hero(episode: $episode) {\n      name\n      id\n      friends {\n        name\n        id\n        appearsIn\n      }\n    }\n  }\n`;\n\n@Component({ ... })\nclass AppComponent {\n  constructor(apollo: Apollo) {\n    apollo.watchQuery({\n      query: HERO_QUERY,\n      variables: { episode: 'JEDI' } // controlled by TypeScript\n    })\n      .valueChanges\n      .subscribe(result => {\n        console.log(result.data.hero);\n      });\n  }\n}\n")),Object(a.b)("p",null,"With this addition, the entirety of the integration between Apollo and Angular\ncan be statically typed. When combined with the strong tooling each system\nprovides, it can make for a much improved application and developer experience."),Object(a.b)("h2",{id:"other-usage"},"Other usage"),Object(a.b)("p",null,"It is not only ",Object(a.b)("inlineCode",{parentName:"p"},"Apollo")," service where you can use generic types for Options and\nVariables. Same logic applies to ",Object(a.b)("inlineCode",{parentName:"p"},"QueryRef")," object."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { QueryRef } from 'apollo-angular';\n\ntype Hero = {\n  name: string;\n  id: string;\n  appearsIn: string[];\n  friends: Hero[];\n};\n\ntype Response = {\n  hero: Hero;\n};\n\ntype Variables = {\n  episode: string\n};\n\n@Component({ ... })\nclass AppComponent {\n  heroQuery: QueryRef<Response, Variables>;\n\n  changeEpisode(episode: string) {\n    this.heroQuery.setVariables({\n      episode: 'JEDI'\n    });\n  }\n}\n")))}u.isMDXComponent=!0}}]);