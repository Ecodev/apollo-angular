(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{130:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return m})),n.d(t,"default",(function(){return u}));var o=n(1),r=n(8),i=(n(0),n(251)),a=["components"],s={title:"Optimistic UI"},c={unversionedId:"performance/optimistic-ui",id:"performance/optimistic-ui",isDocsHomePage:!1,title:"Optimistic UI",description:"As explained in the mutations section, optimistic UI is a pattern that you can use to simulate the results of a mutation and update the UI even before receiving a response from the server. Once the response is received from the server, optimistic result is thrown away and replaced with the actual result.",source:"@site/docs/performance/optimistic-ui.md",slug:"/performance/optimistic-ui",permalink:"/docs/performance/optimistic-ui",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/performance/optimistic-ui.md",version:"current",sidebar:"docs",previous:{title:"Improving performance",permalink:"/docs/performance/improving-performance"},next:{title:"Server Side Rendering",permalink:"/docs/performance/server-side-rendering"}},m=[{value:"Basic optimistic UI",id:"basic-optimistic-ui",children:[]},{value:"Adding to a list",id:"adding-to-a-list",children:[]}],p={toc:m};function u(e){var t=e.components,n=Object(r.a)(e,a);return Object(i.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"As explained in the ",Object(i.b)("a",{parentName:"p",href:"/docs/data/mutations#optimistic-ui"},"mutations")," section, optimistic UI is a pattern that you can use to simulate the results of a mutation and update the UI even before receiving a response from the server. Once the response is received from the server, optimistic result is thrown away and replaced with the actual result."),Object(i.b)("p",null,"Optimistic UI provides an easy way to make your UI respond much faster, while ensuring that the data becomes consistent with the actual response when it arrives."),Object(i.b)("h2",{id:"basic-optimistic-ui"},"Basic optimistic UI"),Object(i.b)("p",null,'Let\'s say we have an "edit comment" mutation, and we want the UI to update immediately when the user submits the mutation, instead of waiting for the server response. This is what the ',Object(i.b)("inlineCode",{parentName:"p"},"optimisticResponse")," parameter to the ",Object(i.b)("inlineCode",{parentName:"p"},"mutate")," method provides."),Object(i.b)("p",null,"The main way to get GraphQL data into your UI components with Apollo is to use a query, so if we want our optimistic response to update the UI, we have to make sure to return an optimistic response that will update the correct query result."),Object(i.b)("p",null,"Here's what this looks like in the code:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"\nconst updateComment = gql`\n  mutation updateComment($commentId: ID!, $commentContent: String!) {\n    updateComment(commentId: $commentId, commentContent: $commentContent) {\n      id\n      __typename\n      content\n    }\n  }\n`;\n\n@Component({ ... })\nclass AppComponent {\n  submit({ commentId, commentContent }) {\n    this.apollo.mutate({\n      variables: { commentId, commentContent },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updateComment: {\n          id: commentId,\n          __typename: 'Comment',\n          content: commentContent,\n        },\n      },\n    }).subscribe();\n  }\n}\n")),Object(i.b)("p",null,"We select ",Object(i.b)("inlineCode",{parentName:"p"},"id")," and ",Object(i.b)("inlineCode",{parentName:"p"},"__typename")," because that's what our Type Policies use to determine a globally unique object ID. We need to make sure to provide the right values for those fields, so that Apollo knows what object we are referring to."),Object(i.b)("h2",{id:"adding-to-a-list"},"Adding to a list"),Object(i.b)("p",null,"In the example above, we showed how to seamlessly edit an existing object in the store with an optimistic mutation result. However, many mutations don't just update an existing object in the store, but they insert a new one."),Object(i.b)("p",null,"In that case we need to specify how to integrate the new data into existing queries, and thus our UI. You can read in detail about how to do that in the article about ",Object(i.b)("a",{parentName:"p",href:"/docs/caching/interaction"},"controlling the store"),"--in particular, we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"update")," method to insert a result into an existing query's result set. ",Object(i.b)("inlineCode",{parentName:"p"},"update")," works exactly the same way for optimistic results and the real results returned from the server."),Object(i.b)("p",null,"Here is a concrete example from GitHunt, which inserts a comment into an existing list of comments."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import CommentAppQuery from '../queries/CommentAppQuery';\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation submitComment($repoFullName: String!, $commentContent: String!) {\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }\n`;\n\n@Component({ ... })\nclass AppComponent {\n  submit({ repoFullName, commentContent }) {\n    this.apollo.mutate({\n      variables: { repoFullName, commentContent },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        submitComment: {\n          __typename: 'Comment',\n          postedBy: ownProps.currentUser,\n          createdAt: +new Date,\n          content: commentContent,\n        },\n      },\n      update: (proxy, { data: { submitComment } }) => {\n        // Read the data from our cache for this query.\n        const data = proxy.readQuery({ query: CommentAppQuery });\n        // Add our comment from the mutation to the end.\n        data.comments.push(submitComment);\n        // Write our data back to the cache.\n        proxy.writeQuery({ query: CommentAppQuery, data });\n      },\n    }).subscribe();\n  }\n}\n")))}u.isMDXComponent=!0},251:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=r.a.createContext({}),p=function(e){var t=r.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,b=u["".concat(a,".").concat(d)]||u[d]||l[d]||i;return n?r.a.createElement(b,s(s({ref:t},m),{},{components:n})):r.a.createElement(b,s({ref:t},m))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var m=2;m<i;m++)a[m]=n[m];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);