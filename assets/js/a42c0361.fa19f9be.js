(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{146:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(1),i=a(8),r=(a(0),a(251)),l=["components"],o={title:"Managing local state",sidebar_title:"Overview",description:"Interacting with local data in Apollo Client"},c={unversionedId:"local-state/managing-state-with-field-policies",id:"local-state/managing-state-with-field-policies",isDocsHomePage:!1,title:"Managing local state",description:"Interacting with local data in Apollo Client",source:"@site/docs/local-state/managing-state-with-field-policies.md",slug:"/local-state/managing-state-with-field-policies",permalink:"/docs/local-state/managing-state-with-field-policies",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/local-state/managing-state-with-field-policies.md",version:"current",sidebar:"docs",previous:{title:"Managing local state",permalink:"/docs/local-state/management"},next:{title:"Reactive variables",permalink:"/docs/local-state/reactive-variables"}},s=[{value:"Defining",id:"defining",children:[]},{value:"Querying",id:"querying",children:[]},{value:"Storing",id:"storing",children:[{value:"Storing local state in reactive variables",id:"storing-local-state-in-reactive-variables",children:[]},{value:"Storing local state in the cache",id:"storing-local-state-in-the-cache",children:[]}]},{value:"Modifying",id:"modifying",children:[]},{value:"Using local-only fields as GraphQL variables",id:"using-local-only-fields-as-graphql-variables",children:[{value:"Considerations for using <code>@export</code>",id:"considerations-for-using-export",children:[]}]}],p={toc:s};function b(e){var t=e.components,a=Object(i.a)(e,l);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Your Apollo Client queries can include ",Object(r.b)("strong",{parentName:"p"},"local-only fields")," that ",Object(r.b)("em",{parentName:"p"},"aren't")," defined in your GraphQL server's schema. The values for these fields are calculated locally using any logic you want, such as reading data from ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage"),"."),Object(r.b)("p",null,"A single query can include both local-only fields ",Object(r.b)("em",{parentName:"p"},"and")," fields that are fetched from your GraphQL server."),Object(r.b)("h2",{id:"defining"},"Defining"),Object(r.b)("p",null,"Let's say we're building an e-commerce application. Most of a product's details are stored on our back-end server, but we want to define an ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart")," boolean field that's local to the client. First, we create a ",Object(r.b)("strong",{parentName:"p"},"field policy")," for ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart"),"."),Object(r.b)("p",null,"A field policy specifies custom logic for how a single GraphQL field is fetched from and written to your Apollo Client cache. You can define field policies for both local-only fields and remotely fetched fields."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Field policies are primarily documented in ",Object(r.b)("a",{parentName:"p",href:"/docs/caching/field-behavior"},"Customizing the behavior of cached fields"),". This article specifically describes how to use them with local-only fields.")),Object(r.b)("p",null,"You define your application's field policies in a map that you provide to the constructor of Apollo Client's ",Object(r.b)("inlineCode",{parentName:"p"},"InMemoryCache"),". Each field policy is a child of a particular ",Object(r.b)("em",{parentName:"p"},"type")," policy (much like the corresponding field is a child of a particular type)."),Object(r.b)("p",null,"Here's a sample ",Object(r.b)("inlineCode",{parentName:"p"},"InMemoryCache")," constructor that defines a field policy for ",Object(r.b)("inlineCode",{parentName:"p"},"Product.isInCart"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"const cache = new InMemoryCache({\n  typePolicies: {\n    // Type policy map\n    Product: {\n      fields: {\n        // Field policy map for the Product type\n        isInCart: {\n          // Field policy for the isInCart field\n          read(_, {variables}) {\n            // The read function for the isInCart field\n            return localStorage.getItem('CART').includes(variables.productId);\n          },\n        },\n      },\n    },\n  },\n});\n")),Object(r.b)("p",null,"The field policy above defines a ",Object(r.b)("a",{parentName:"p",href:"/docs/caching/field-behavior#the-read-function"},Object(r.b)("inlineCode",{parentName:"a"},"read")," function")," for the ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart")," field. Whenever you query a field that has a ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function, the cache calls that function to calculate the field's value. In this case, the ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function returns whether the queried product's ID is in the ",Object(r.b)("inlineCode",{parentName:"p"},"CART")," array in ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage"),"."),Object(r.b)("p",null,"You can use ",Object(r.b)("inlineCode",{parentName:"p"},"read")," functions to perform any sort of logic you want, including:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Manually executing other cache operations"),Object(r.b)("li",{parentName:"ul"},"Calling helper utilities or libraries to prepare, validate, or sanitize data"),Object(r.b)("li",{parentName:"ul"},"Fetching data from a separate store"),Object(r.b)("li",{parentName:"ul"},"Logging usage metrics")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If you query a local-only field that ",Object(r.b)("em",{parentName:"p"},"doesn't")," define a ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function, Apollo Client performs a default cache lookup for the field. See ",Object(r.b)("a",{parentName:"p",href:"#storing-local-state-in-the-cache"},"Storing local state in the cache")," for details.")),Object(r.b)("h2",{id:"querying"},"Querying"),Object(r.b)("p",null,"Now that we've defined a field policy for ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart"),", we can include the field in a query that ",Object(r.b)("em",{parentName:"p"},"also")," queries our back-end server, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript{6}"},"const GET_PRODUCT_DETAILS = gql`\n  query ProductDetails($productId: ID!) {\n    product(id: $productId) {\n      name\n      price\n      isInCart @client\n    }\n  }\n`;\n")),Object(r.b)("p",null,"That's it! The ",Object(r.b)("inlineCode",{parentName:"p"},"@client")," directive tells Apollo Client that ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart")," is a local-only field. Because ",Object(r.b)("inlineCode",{parentName:"p"},"isInCart")," is local-only, Apollo Client omits it from the query it sends to our server to fetch ",Object(r.b)("inlineCode",{parentName:"p"},"name")," and ",Object(r.b)("inlineCode",{parentName:"p"},"price"),". The final query result is returned only after all local ",Object(r.b)("em",{parentName:"p"},"and")," remote fields are populated."),Object(r.b)("h2",{id:"storing"},"Storing"),Object(r.b)("p",null,"You can use Apollo Client to query local state, regardless of how you ",Object(r.b)("em",{parentName:"p"},"store")," that state. Apollo Client provides a couple of optional but helpful mechanisms for representing local state:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#storing-local-state-in-reactive-variables"},"Reactive variables")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#storing-local-state-in-the-cache"},"The Apollo Client cache itself"))),Object(r.b)("h3",{id:"storing-local-state-in-reactive-variables"},"Storing local state in reactive variables"),Object(r.b)("p",null,"Apollo Client ",Object(r.b)("a",{parentName:"p",href:"/docs/local-state/reactive-variables"},"reactive variables")," are great for representing local state:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You can read and modify reactive variables from anywhere in your application, without needing to use a GraphQL operation to do so."),Object(r.b)("li",{parentName:"ul"},"Unlike the Apollo Client cache, reactive variables don't enforce data normalization, meaning you can store data in any format you want."),Object(r.b)("li",{parentName:"ul"},"If a field's value depends on the value of a reactive variable, and that variable's value ",Object(r.b)("em",{parentName:"li"},"changes"),", ",Object(r.b)("strong",{parentName:"li"},"every active query that includes the field automatically refreshes"),".")),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("p",null,"Returning to our e-commerce application, let's say we want to fetch a list of the item IDs in a user's cart, and this list is stored locally. The query to do that looks like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"export const GET_CART_ITEMS = gql`\n  query GetCartItems {\n    cartItems @client\n  }\n`;\n")),Object(r.b)("p",null,"Let's initialize a reactive variable to store our local list of cart items, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"export const cartItemsVar = makeVar([]);\n")),Object(r.b)("p",null,"This initializes a reactive variable that contains an empty array. We can get this variable's current value by calling ",Object(r.b)("inlineCode",{parentName:"p"},"cartItemsVar()"),", and we can set a ",Object(r.b)("em",{parentName:"p"},"new")," value by calling ",Object(r.b)("inlineCode",{parentName:"p"},"cartItemsVar(newValue)"),"."),Object(r.b)("p",null,"Next, let's define the field policy for ",Object(r.b)("inlineCode",{parentName:"p"},"cartItems"),". As always, we pass this to the constructor of ",Object(r.b)("inlineCode",{parentName:"p"},"InMemoryCache"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"export const cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cartItems: {\n          read() {\n            return cartItemsVar();\n          },\n        },\n      },\n    },\n  },\n});\n")),Object(r.b)("p",null,"This ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function returns the value of our reactive variable whenever ",Object(r.b)("inlineCode",{parentName:"p"},"cartItems")," is queried."),Object(r.b)("p",null,"Now, let's create a button component that enables the user to add a product to their cart:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { cartItemsVar } from './cache';\n// ... other imports\n\n@Component({ ... })\nexport class AddToCardComponent {\n  @Input() productId: number;\n\n  submit() {\n    const cartItems = cartItemsVar();\n    cartItemsVar([...cartItems, this.productId])\n  }\n}\n")),Object(r.b)("p",null,"On ",Object(r.b)("inlineCode",{parentName:"p"},"submit")," call, the value of ",Object(r.b)("inlineCode",{parentName:"p"},"cartItemsVar")," is updated by appending ",Object(r.b)("inlineCode",{parentName:"p"},"productId"),". When this happens, Apollo Client notifies every active query that includes the ",Object(r.b)("inlineCode",{parentName:"p"},"cartItems")," field."),Object(r.b)("p",null,"Here's a ",Object(r.b)("inlineCode",{parentName:"p"},"Cart")," component that uses the ",Object(r.b)("inlineCode",{parentName:"p"},"GET_CART_ITEMS")," query and therefore refreshes automatically whenever the value of ",Object(r.b)("inlineCode",{parentName:"p"},"cartItemsVar")," changes:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"export const GET_CART_ITEMS = gql`\n  query GetCartItems {\n    cartItems @client\n  }\n`;\n\n@Component({...})\nexport class CartComponent {\n  data: Observable<any>;\n\n  constructor(private apollo: Apollo) {\n    // Emits a new result when cartItemsVar changes its value\n    this.data = this.apollo.watchQuery({\n      query: GET_CART_ITEMS,\n    }).valueChanges;\n  }\n}\n")),Object(r.b)("h3",{id:"storing-local-state-in-the-cache"},"Storing local state in the cache"),Object(r.b)("p",null,"Storing local state directly in the Apollo Client cache provides some advantages, but usually requires more code than ",Object(r.b)("a",{parentName:"p",href:"#storing-local-state-in-reactive-variables"},"using reactive variables"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You don't ",Object(r.b)("em",{parentName:"li"},"have")," to ",Object(r.b)("a",{parentName:"li",href:"#defining"},"define a field policy")," for local-only fields that are present in the cache. If you query a field that doesn't define a ",Object(r.b)("inlineCode",{parentName:"li"},"read")," function, by default Apollo Client attempts to fetch that field's value directly from the cache."),Object(r.b)("li",{parentName:"ul"},"When you modify a cached field with ",Object(r.b)("a",{parentName:"li",href:"/docs/caching/interaction#writequery-and-writefragment"},Object(r.b)("inlineCode",{parentName:"a"},"writeQuery")," or ",Object(r.b)("inlineCode",{parentName:"a"},"writeFragment")),", ",Object(r.b)("strong",{parentName:"li"},"every active query that includes the field automatically refreshes"),".")),Object(r.b)("h4",{id:"example-1"},"Example"),Object(r.b)("p",null,"Let's say our application defines the following query:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"const IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"isLoggedIn")," field of this query is a local-only field. We can use ",Object(r.b)("a",{parentName:"p",href:"/docs/caching/interaction#writequery-and-writefragment"},"the ",Object(r.b)("inlineCode",{parentName:"a"},"writeQuery")," method")," to write a value for this field directly to the Apollo Client cache, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"cache.writeQuery({\n  query: IS_LOGGED_IN,\n  data: {\n    isLoggedIn: !!localStorage.getItem('token'),\n  },\n});\n")),Object(r.b)("p",null,"This writes a boolean value according to whether ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage")," includes a ",Object(r.b)("inlineCode",{parentName:"p"},"token")," item, indicating an active session."),Object(r.b)("p",null,"Now our application's components can render according to the value of the ",Object(r.b)("inlineCode",{parentName:"p"},"isLoggedIn")," field, ",Object(r.b)("em",{parentName:"p"},"without")," our needing to define a ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function for it:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},'@Component({\n  template: `\n    <div *ngIf="isLoggedIn | async; else loginBlock">\n      <app-pages />\n    </div>\n\n    <ng-template #loginBlock>\n      <app-login />\n    </ng-template>\n  `,\n})\nexport class AppComponent {\n  isLoggedIn: Observable<boolean>;\n\n  constructor(private apollo: Apollo) {\n    this.isLoggedIn = this.apollo\n      .watchQuery({\n        query: IS_LOGGED_IN,\n      })\n      .valueChanges.pipe(map((result) => result.data.isLoggedIn));\n  }\n}\n')),Object(r.b)("p",null,"Note that even if you ",Object(r.b)("em",{parentName:"p"},"do")," store local data as fields in the Apollo Client cache, you can (and probably should!) still define ",Object(r.b)("inlineCode",{parentName:"p"},"read")," functions for those fields. A ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function can execute helpful custom logic, such as returning a default value if a field isn't present in the cache."),Object(r.b)("h2",{id:"modifying"},"Modifying"),Object(r.b)("p",null,"The way you modify the value of a local-only field depends on how you ",Object(r.b)("a",{parentName:"p",href:"#storing"},"store that field"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"If you're using a ",Object(r.b)("a",{parentName:"strong",href:"#storing-local-state-in-reactive-variables"},"reactive variable")),", all you need to do is set the reactive variable's new value. Apollo Client automatically detects this change and triggers a refresh of every active operation that includes an affected field.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"If you're ",Object(r.b)("a",{parentName:"strong",href:"#storing-local-state-in-the-cache"},"using the cache directly")),", call one of ",Object(r.b)("inlineCode",{parentName:"p"},"writeQuery"),", ",Object(r.b)("inlineCode",{parentName:"p"},"writeFragment"),", or ",Object(r.b)("inlineCode",{parentName:"p"},"cache.modify")," (",Object(r.b)("a",{parentName:"p",href:"/docs/caching/interaction"},"all documented here"),") to modify cached fields. Like reactive variables, all of these methods trigger a refresh of every affected active operation.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"If you're using another storage method"),", such as ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage"),", set the field's new value in whatever method you're using. Then, you can force a refresh of every affected operation by calling ",Object(r.b)("a",{parentName:"p",href:"/docs/caching/garbage-collection#cacheevict"},Object(r.b)("inlineCode",{parentName:"a"},"cache.evict")),". In your call, provide both the ",Object(r.b)("inlineCode",{parentName:"p"},"id")," of your field's containing object and the name of the local-only field."))),Object(r.b)("h2",{id:"using-local-only-fields-as-graphql-variables"},"Using local-only fields as GraphQL variables"),Object(r.b)("p",null,"If your GraphQL query uses variables, the local-only fields of that query can provide the ",Object(r.b)("em",{parentName:"p"},"values")," of those variables."),Object(r.b)("p",null,"To do so, you apply the ",Object(r.b)("inlineCode",{parentName:"p"},'@export(as: "variableName")')," directive, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript{3}"},'const GET_CURRENT_AUTHOR_POST_COUNT = gql`\n  query CurrentAuthorPostCount($authorId: Int!) {\n    currentAuthorId @client @export(as: "authorId")\n    postCount(authorId: $authorId)\n  }\n`;\n')),Object(r.b)("p",null,"In the query above, the result of the local-only field ",Object(r.b)("inlineCode",{parentName:"p"},"currentAuthorId")," is used as the value of the ",Object(r.b)("inlineCode",{parentName:"p"},"$authorId")," variable that's passed to ",Object(r.b)("inlineCode",{parentName:"p"},"postCount"),"."),Object(r.b)("p",null,"You can do this even if ",Object(r.b)("inlineCode",{parentName:"p"},"postCount")," is ",Object(r.b)("em",{parentName:"p"},"also")," a local-only field (i.e., if it's also marked as ",Object(r.b)("inlineCode",{parentName:"p"},"@client"),")."),Object(r.b)("h3",{id:"considerations-for-using-export"},"Considerations for using ",Object(r.b)("inlineCode",{parentName:"h3"},"@export")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"To use the ",Object(r.b)("inlineCode",{parentName:"p"},"@export")," directive, a field ",Object(r.b)("strong",{parentName:"p"},"must also")," use the ",Object(r.b)("inlineCode",{parentName:"p"},"@client")," directive. In other words, only local-only fields can be used as variable values.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A field that ",Object(r.b)("inlineCode",{parentName:"p"},"@export"),"s a variable value ",Object(r.b)("strong",{parentName:"p"},"must appear before")," any fields that ",Object(r.b)("em",{parentName:"p"},"use")," that variable.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If multiple fields in an operation use the ",Object(r.b)("inlineCode",{parentName:"p"},"@export")," directive to assign their value to the ",Object(r.b)("em",{parentName:"p"},"same")," variable, the field listed ",Object(r.b)("em",{parentName:"p"},"last")," takes precedence. When this happens in development mode, Apollo Client logs a warning message.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"At first glance, the ",Object(r.b)("inlineCode",{parentName:"p"},"@export")," directive appears to violate the ",Object(r.b)("a",{parentName:"p",href:"https://graphql.github.io/graphql-spec/draft/#sec-Normal-and-Serial-Execution"},"GraphQL specification's requirement")," that the execution order of an operation must not affect its result:"),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"\u2026the resolution of fields other than top\u2010level mutation fields must always be side effect\u2010free and idempotent, the execution order must not affect the result, and hence the server has the freedom to execute the field entries in whatever order it deems optimal.")),Object(r.b)("p",{parentName:"li"},"However, all ",Object(r.b)("inlineCode",{parentName:"p"},"@export"),"ed variable values are populated ",Object(r.b)("em",{parentName:"p"},"before")," an operation is sent to a remote server. Only local-only fields can use the ",Object(r.b)("inlineCode",{parentName:"p"},"@export")," directive, and those fields are stripped from operations before they're transmitted."))))}b.isMDXComponent=!0},251:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,m=b["".concat(l,".").concat(u)]||b[u]||d[u]||r;return a?i.a.createElement(m,o(o({ref:t},s),{},{components:a})):i.a.createElement(m,o({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);