(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{143:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(1),o=n(8),r=(n(0),n(250)),i=["components"],c={title:"Advanced topics on caching",sidebar_title:"Advanced topics"},l={unversionedId:"caching/advanced-topics",id:"caching/advanced-topics",isDocsHomePage:!1,title:"Advanced topics on caching",description:"Here are some common situations where you would need to access the cache directly. If you're manipulating the cache in an interesting way and would like your example to be featured, please send in a pull request!",source:"@site/docs/caching/advanced-topics.md",slug:"/caching/advanced-topics",permalink:"/docs/caching/advanced-topics",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/caching/advanced-topics.md",version:"current",sidebar:"docs",previous:{title:"Customizing the behavior of cached fields",permalink:"/docs/caching/field-behavior"},next:{title:"Managing local state",permalink:"/docs/local-state/management"}},s=[{value:"Bypassing the cache",id:"bypassing-the-cache",children:[]},{value:"Updating after a mutation",id:"updating-after-a-mutation",children:[]},{value:"Incremental loading: <code>fetchMore</code>",id:"incremental-loading-fetchmore",children:[]},{value:"The <code>@connection</code> directive",id:"the-connection-directive",children:[]},{value:"Cache redirects using field policy <code>read</code> functions",id:"cache-redirects-using-field-policy-read-functions",children:[]},{value:"Resetting the store",id:"resetting-the-store",children:[]},{value:"Cache persistence",id:"cache-persistence",children:[]}],p={toc:s};function d(e){var t=e.components,n=Object(o.a)(e,i);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Here are some common situations where you would need to access the cache directly. If you're manipulating the cache in an interesting way and would like your example to be featured, please send in a pull request!"),Object(r.b)("h2",{id:"bypassing-the-cache"},"Bypassing the cache"),Object(r.b)("p",null,"Sometimes it makes sense to not use the cache for a specific operation. This can be done using the ",Object(r.b)("inlineCode",{parentName:"p"},"no-cache")," ",Object(r.b)("inlineCode",{parentName:"p"},"fetchPolicy"),". The ",Object(r.b)("inlineCode",{parentName:"p"},"no-cache")," policy does not write to the cache with the response. This may be useful for sensitive data like passwords that you don\u2019t want to keep in the cache."),Object(r.b)("h2",{id:"updating-after-a-mutation"},"Updating after a mutation"),Object(r.b)("p",null,"In some cases, just using ",Object(r.b)("inlineCode",{parentName:"p"},"dataIdFromObject")," is not enough for your application UI to update correctly. For example, if you want to add something to a list of objects without refetching the entire list, or if there are some objects that to which you can't assign an object identifier, Apollo Client cannot update existing queries for you. Read on to learn about the other tools at your disposal."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"refetchQueries")," is the simplest way of updating the cache. With ",Object(r.b)("inlineCode",{parentName:"p"},"refetchQueries")," you can specify one or more queries that you want to run after a mutation is completed in order to refetch the parts of the store that may have been affected by the mutation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"apollo.mutate({\n  //... insert comment mutation\n  refetchQueries: [\n    {\n      query: gql`\n        query UpdateCache($repoName: String!) {\n          entry(repoFullName: $repoName) {\n            id\n            comments {\n              postedBy {\n                login\n                html_url\n              }\n              createdAt\n              content\n            }\n          }\n        }\n      `,\n      variables: {repoName: 'apollographql/apollo-client'},\n    },\n  ],\n});\n")),Object(r.b)("p",null,"Please note that if you call ",Object(r.b)("inlineCode",{parentName:"p"},"refetchQueries")," with an array of strings, then Apollo Client will look for any previously called queries that have the same names as the provided strings. It will then refetch those queries with their current variables."),Object(r.b)("p",null,"A very common way of using ",Object(r.b)("inlineCode",{parentName:"p"},"refetchQueries")," is to import queries defined for other components to make sure that those components will be updated:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"import RepoCommentsQuery from '../queries/RepoCommentsQuery';\n\napollo.mutate({\n  //... insert comment mutation\n  refetchQueries: [\n    {\n      query: RepoCommentsQuery,\n      variables: {repoFullName: 'apollographql/apollo-client'},\n    },\n  ],\n});\n")),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"update")," gives you full control over the cache, allowing you to make changes to your data model in response to a mutation in any way you like. ",Object(r.b)("inlineCode",{parentName:"p"},"update")," is the recommended way of updating the cache after a query. It is explained in full ",Object(r.b)("a",{parentName:"p",href:"/docs/data/mutations"},"here"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import CommentAppQuery from '../queries/CommentAppQuery';\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation SubmitComment($repoFullName: String!, $commentContent: String!) {\n    submitComment(\n      repoFullName: $repoFullName\n      commentContent: $commentContent\n    ) {\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }\n`;\n\n@Component({ ... })\nclass CommentsPageComponent {\n  constructor(private apollo: Apollo) {}\n\n  submit({repoFullName, commentContent}) {\n    this.apollo.mutate({\n        mutation: SUBMIT_COMMENT_MUTATION,\nvariables: { repoFullName, commentContent },\n            update: (store, { data: { submitComment } }) => {\n              // Read the data from our cache for this query.\n              const data = store.readQuery({ query: CommentAppQuery });\n              // Add our comment from the mutation to the end.\n              const comments = [...data.comments, submitComment];\n              // Write our data back to the cache.\n              store.writeQuery({ query: CommentAppQuery, { comments }  });\n            }\n    })\n  }\n}\n")),Object(r.b)("h2",{id:"incremental-loading-fetchmore"},"Incremental loading: ",Object(r.b)("inlineCode",{parentName:"h2"},"fetchMore")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," can be used to update the result of a query based on the data returned by another query. Most often, it is used to handle infinite-scroll pagination or other situations where you are loading more data when you already have some."),Object(r.b)("p",null,'In our GitHunt example, we have a paginated feed that displays a list of GitHub repositories. When we hit the "Load More" button, we don\'t want Apollo Client to throw away the repository information it has already loaded. Instead, it should just append the newly loaded repositories to the list that Apollo Client already has in the store. With this update, our UI component should re-render and show us all of the available repositories.'),Object(r.b)("p",null,"Let's see how to do that with the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," method on a query:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"const FEED_QUERY = gql`\n  query Feed($offset: Int, $limit: Int) {\n    feed(offset: $offset, limit: $limit) {\n      id\n      # ...\n    }\n  }\n`;\n\n@Component({...})\nclass FeedComponent {\n  feedQuery: QueryRef<any>;\n  feed: Observable<any>;\n  offset: number;\n\n  constructor(private apollo: Apollo) {\n    this.feedQuery = this.apollo.watchQuery({\n      query: FEED_QUERY,\n      variables: {\n        offset: 0,\n        limit: 10,\n      },\n      fetchPolicy: 'cache-and-network',\n    });\n\n    this.feed = this.feedQuery.valueChanges.pipe(\n      tap(result => {\n        this.offset = result.data.feed.length\n      })\n      map(result => result.data.feed)\n    )\n  }\n\n  loadMore() {\n    this.feedQuery.fetchMore({\n      variables: {\n        offset: this.offset,\n      },\n      updateQuery: (prev, {fetchMoreResult}) => {\n        if (!fetchMoreResult) return prev;\n\n        return Object.assign({}, prev, {\n          feed: [...prev.feed, ...fetchMoreResult.feed],\n        });\n      },\n    });\n  }\n}\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," method takes a map of ",Object(r.b)("inlineCode",{parentName:"p"},"variables")," to be sent with the new query. Here, we're setting the offset to ",Object(r.b)("inlineCode",{parentName:"p"},"feed.length")," so that we fetch items that aren't already displayed on the feed. This variable map is merged with the one that's been specified for the query associated with the component. This means that other variables, e.g. the ",Object(r.b)("inlineCode",{parentName:"p"},"limit")," variable, will have the same value as they do within the component query."),Object(r.b)("p",null,"It can also take a ",Object(r.b)("inlineCode",{parentName:"p"},"query")," named argument, which can be a GraphQL document containing a query that will be fetched in order to fetch more information; we refer to this as the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," query. By default, the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," query is the query associated with the container, in this case the ",Object(r.b)("inlineCode",{parentName:"p"},"FEED_QUERY"),"."),Object(r.b)("p",null,"When we call ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore"),", Apollo Client will fire the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," query and use the logic in the ",Object(r.b)("inlineCode",{parentName:"p"},"updateQuery")," option to incorporate that into the original result. The named argument ",Object(r.b)("inlineCode",{parentName:"p"},"updateQuery")," should be a function that takes the previous result of the query associated with your component (i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"FEED_QUERY")," in this case) and the information returned by the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," query and return a combination of the two."),Object(r.b)("p",null,"Here, the ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," query is the same as the query associated with the component. Our ",Object(r.b)("inlineCode",{parentName:"p"},"updateQuery")," takes the new feed items returned and just appends them onto the feed items that we'd asked for previously. With this, the UI will update and the feed will contain the next page of items!"),Object(r.b)("p",null,"Although ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," is often used for pagination, there are many other cases in which it is applicable. For example, suppose you have a list of items (say, a collaborative todo list) and you have a way to fetch items that have been updated after a certain time. Then, you don't have to refetch the whole todo list to get updates: you can just incorporate the newly added items with ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore"),", as long as your ",Object(r.b)("inlineCode",{parentName:"p"},"updateQuery")," function correctly merges the new results."),Object(r.b)("h2",{id:"the-connection-directive"},"The ",Object(r.b)("inlineCode",{parentName:"h2"},"@connection")," directive"),Object(r.b)("p",null,"Fundamentally, paginated queries are the same as any other query with the exception that calls to ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore")," update the same cache key. Since these queries are cached by both the initial query and their parameters, a problem arises when later retrieving or updating paginated queries in the cache. We don\u2019t care about pagination arguments such as limits, offsets, or cursors outside of the need to ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore"),", nor do we want to provide them simply for accessing cached data."),Object(r.b)("p",null,"To solve this Apollo Client 1.6 introduced the ",Object(r.b)("inlineCode",{parentName:"p"},"@connection")," directive to specify a custom store key for results. A connection allows us to set the cache key for a field and to filter which arguments actually alter the query."),Object(r.b)("p",null,"To use the ",Object(r.b)("inlineCode",{parentName:"p"},"@connection")," directive, simply add the directive to the segment of the query you want a custom store key for and provide the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," parameter to specify the store key. In addition to the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," parameter, you can also include the optional ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," parameter, which takes an array of query argument names to include in the generated custom store key."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},'const query = gql`\n  query Feed($type: FeedType!, $offset: Int, $limit: Int) {\n    feed(type: $type, offset: $offset, limit: $limit)\n      @connection(key: "feed", filter: ["type"]) {\n      ...FeedEntry\n    }\n  }\n`;\n')),Object(r.b)("p",null,"With the above query, even with multiple ",Object(r.b)("inlineCode",{parentName:"p"},"fetchMore"),"s, the results of each feed update will always result in the ",Object(r.b)("inlineCode",{parentName:"p"},"feed")," key in the store being updated with the latest accumulated values. In this example, we also use the ",Object(r.b)("inlineCode",{parentName:"p"},"@connection")," directive's optional ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," argument to include the ",Object(r.b)("inlineCode",{parentName:"p"},"type")," query argument in the store key, which results in multiple store values that accumulate queries from each type of feed."),Object(r.b)("p",null,"Now that we have a stable store key, we can easily use ",Object(r.b)("inlineCode",{parentName:"p"},"writeQuery")," to perform a store update, in this case clearing out the feed."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},'cache.writeQuery({\n  query: gql`\n    query Feed($type: FeedType!) {\n      feed(type: $type) @connection(key: "feed", filter: ["type"]) {\n        id\n      }\n    }\n  `,\n  variables: {\n    type: \'top\',\n  },\n  data: {\n    feed: [],\n  },\n});\n')),Object(r.b)("p",null,"Note that because we are only using the ",Object(r.b)("inlineCode",{parentName:"p"},"type")," argument in the store key, we don't have to provide ",Object(r.b)("inlineCode",{parentName:"p"},"offset")," or ",Object(r.b)("inlineCode",{parentName:"p"},"limit"),"."),Object(r.b)("h2",{id:"cache-redirects-using-field-policy-read-functions"},"Cache redirects using field policy ",Object(r.b)("inlineCode",{parentName:"h2"},"read")," functions"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",Object(r.b)("strong",{parentName:"p"},"Note:")," Apollo Client >= 3.0 no longer supports the ",Object(r.b)("inlineCode",{parentName:"p"},"ApolloClient")," ",Object(r.b)("inlineCode",{parentName:"p"},"cacheRedirects")," constructor option. Equivalent ",Object(r.b)("inlineCode",{parentName:"p"},"cacheRedirects")," functionality can now be handled with field policy ",Object(r.b)("inlineCode",{parentName:"p"},"read")," functions, and is explained below.")),Object(r.b)("p",null,"In some cases, a query requests data that already exists in the cache under a different reference. A very common example of this is when your UI has a list view and a detail view that both use the same data. The list view might run the following query:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-graphql"},"query Books {\n  books {\n    id\n    title\n    abstract\n  }\n}\n")),Object(r.b)("p",null,"When a specific book is selected, the detail view displays an individual item using this query:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-graphql"},"query Book($id: ID!) {\n  book(id: $id) {\n    id\n    title\n    abstract\n  }\n}\n")),Object(r.b)("p",null,"We know that the data is most likely already in the client cache, but because it was requested with a different query, Apollo Client doesn't know that. To tell Apollo Client where to look for the existing ",Object(r.b)("inlineCode",{parentName:"p"},"book")," data, we can define a field policy ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function for the ",Object(r.b)("inlineCode",{parentName:"p"},"book")," field:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import {InMemoryCache} from '@apollo/client/core';\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        book(_, {args, toReference}) {\n          return toReference({\n            __typename: 'Book',\n            id: args.id,\n          });\n        },\n      },\n    },\n  },\n});\n")),Object(r.b)("p",null,"Now whenever a query is run that includes a ",Object(r.b)("inlineCode",{parentName:"p"},"book")," field, the ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function above will be executed, and return a reference that points to the book entity that was already created in the cache when the ",Object(r.b)("inlineCode",{parentName:"p"},"Books")," list view query ran. Apollo Client will use the reference returned by the ",Object(r.b)("inlineCode",{parentName:"p"},"read")," function to look up the item in its cache. ",Object(r.b)("inlineCode",{parentName:"p"},"toReference")," is a helper utility that is passed into ",Object(r.b)("inlineCode",{parentName:"p"},"read")," functions as part of the second parameter options object, and is used to generate an entity reference based on its ",Object(r.b)("inlineCode",{parentName:"p"},"__typename")," and ",Object(r.b)("inlineCode",{parentName:"p"},"id"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",Object(r.b)("strong",{parentName:"p"},"Note:")," For the above to work properly, the data returned by the list query has to include all of the data the specific detail query needs. If the specific detail query fetches a field that the list query doesn't return, Apollo Client will consider the cache hit to be incomplete, and will attempt to fetch the full data set over the network (if network requests are enabled).")),Object(r.b)("h2",{id:"resetting-the-store"},"Resetting the store"),Object(r.b)("p",null,"Sometimes, you may want to reset the store entirely, such as ",Object(r.b)("a",{parentName:"p",href:"/docs/recipes/authentication#reset-store-on-logout"},"when a user logs out"),". To accomplish this, use ",Object(r.b)("inlineCode",{parentName:"p"},"client.resetStore")," to clear out your Apollo cache. Since ",Object(r.b)("inlineCode",{parentName:"p"},"client.resetStore")," also refetches any of your active queries for you, it is asynchronous."),Object(r.b)("p",null,"To register a callback function to be executed after the store has been reset, call ",Object(r.b)("inlineCode",{parentName:"p"},"client.onResetStore")," and pass in your callback. If you would like to register multiple callbacks, simply call ",Object(r.b)("inlineCode",{parentName:"p"},"client.onResetStore")," again. All of your callbacks will be pushed into an array and executed concurrently."),Object(r.b)("p",null,"In this example, we're using ",Object(r.b)("inlineCode",{parentName:"p"},"client.onResetStore")," to write default values to the cache. This is useful when using Apollo Client's ",Object(r.b)("a",{parentName:"p",href:"/docs/local-state/management"},"local state management")," features and calling ",Object(r.b)("inlineCode",{parentName:"p"},"client.resetStore")," anywhere in your application."),Object(r.b)("p",null,"You can also call ",Object(r.b)("inlineCode",{parentName:"p"},"client.onResetStore")," from your React components. This can be useful if you would like to force your UI to rerender after the store has been reset."),Object(r.b)("p",null,"If you want to clear the store but don't want to refetch active queries, use\n",Object(r.b)("inlineCode",{parentName:"p"},"client.clearStore()")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"client.resetStore()"),"."),Object(r.b)("h2",{id:"cache-persistence"},"Cache persistence"),Object(r.b)("p",null,"If you would like to persist and rehydrate your Apollo Cache from a storage provider like ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage"),", you can use ",Object(r.b)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-cache-persist"},Object(r.b)("inlineCode",{parentName:"a"},"apollo3-cache-persist")),". ",Object(r.b)("inlineCode",{parentName:"p"},"apollo3-cache-persist")," works with all Apollo caches, including ",Object(r.b)("inlineCode",{parentName:"p"},"InMemoryCache")," & ",Object(r.b)("inlineCode",{parentName:"p"},"Hermes"),", and a variety of different ",Object(r.b)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-cache-persist#storage-providers"},"storage providers"),"."),Object(r.b)("p",null,"To get started, simply pass your Apollo Cache and a storage provider to ",Object(r.b)("inlineCode",{parentName:"p"},"persistCacheSync"),". By default, the contents of your Apollo Cache will be immediately restored, and persisted upon every write to the cache with a short configurable debounce interval."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import {InMemoryCache} from '@apollo/client/core';\nimport {persistCacheSync, LocalStorageWrapper} from 'apollo3-cache-persist';\n\nconst cache = new InMemoryCache();\n\npersistCacheSync({\n  cache,\n  storage: new LocalStorageWrapper(window.LocalStorage),\n});\n")),Object(r.b)("p",null,"For more advanced usage, such as persisting the cache when the app is in the background, and additional configuration options, please check the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-cache-persist"},"README of ",Object(r.b)("inlineCode",{parentName:"a"},"apollo3-cache-persist")),"."))}d.isMDXComponent=!0},250:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,b=d["".concat(i,".").concat(h)]||d[h]||u[h]||r;return n?o.a.createElement(b,c(c({ref:t},s),{},{components:n})):o.a.createElement(b,c({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);