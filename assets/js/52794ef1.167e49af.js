(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{104:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return m}));var a=t(1),r=t(8),o=(t(0),t(250)),i=["components"],s={title:"Using Fragments"},l={unversionedId:"data/fragments",id:"data/fragments",isDocsHomePage:!1,title:"Using Fragments",description:"A GraphQL fragment is a shared piece of query logic.",source:"@site/docs/data/fragments.md",slug:"/data/fragments",permalink:"/docs/data/fragments",editUrl:"https://github.com/kamilkisiela/apollo-angular/edit/master/website/docs/data/fragments.md",version:"current",sidebar:"docs",previous:{title:"Pagination",permalink:"/docs/data/pagination"},next:{title:"Error handling",permalink:"/docs/data/error-handling"}},p=[{value:"Reusing Fragments",id:"reusing-fragments",children:[]},{value:"Colocating Fragments",id:"colocating-fragments",children:[{value:"Creating Fragments",id:"creating-fragments",children:[]},{value:"Importing fragments when using Webpack",id:"importing-fragments-when-using-webpack",children:[]},{value:"Using fragments with unions and interfaces",id:"using-fragments-with-unions-and-interfaces",children:[]},{value:"Defining <code>possibleTypes</code> manually",id:"defining-possibletypes-manually",children:[]},{value:"Auto-generating <code>possibleTypes</code>",id:"auto-generating-possibletypes",children:[]}]}],c={toc:p};function m(e){var n=e.components,t=Object(r.a)(e,i);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A ",Object(o.b)("a",{parentName:"p",href:"http://graphql.org/learn/queries/#fragments"},"GraphQL fragment")," is a shared piece of query logic."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},'fragment NameParts on Person {\n  firstName\n  lastName\n}\n\nquery getPerson {\n  people(id: "7") {\n    ...NameParts\n    avatar(size: LARGE)\n  }\n}\n')),Object(o.b)("p",null,"There are two principal uses for fragments in Apollo:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Sharing fields between multiple queries, mutations or subscriptions."),Object(o.b)("li",{parentName:"ul"},"Breaking your queries up to allow you to co-locate field access with the places they are used.")),Object(o.b)("h2",{id:"reusing-fragments"},"Reusing Fragments"),Object(o.b)("p",null,"The most straightforward use of fragments is to reuse parts of queries (or mutations or subscriptions) in various parts of your application. For instance, in GitHunt on the comments page, we want to fetch the same fields after posting a comment as we originally query. This way we can be sure that we render consistent comment objects as the data changes."),Object(o.b)("p",null,"To do so, we can simply share a fragment describing the fields we need for a comment:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import {gql} from 'apollo-angular';\n\nCommentsPage.fragments = {\n  comment: gql`\n    fragment CommentsPageComment on Comment {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  `,\n};\n")),Object(o.b)("p",null,"We put the fragment on ",Object(o.b)("inlineCode",{parentName:"p"},"CommentsPage.fragments.comment")," by convention, and use the familiar ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," helper to create it."),Object(o.b)("p",null,"When it's time to embed the fragment in a query, we simply use the ",Object(o.b)("inlineCode",{parentName:"p"},"...Name")," syntax in our GraphQL, and embed the fragment inside our query GraphQL document:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const SUBMIT_COMMENT_MUTATION = gql`\n  mutation submitComment($repoFullName: String!, $commentContent: String!) {\n    submitComment(\n      repoFullName: $repoFullName\n      commentContent: $commentContent\n    ) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPage.fragments.comment}\n`;\n\nexport const COMMENT_QUERY = gql`\n  query Comment($repoName: String!) {\n    # ...\n    entry(repoFullName: $repoName) {\n      # ...\n      comments {\n        ...CommentsPageComment\n      }\n      # ...\n    }\n  }\n  ${CommentsPage.fragments.comment}\n`;\n")),Object(o.b)("h2",{id:"colocating-fragments"},"Colocating Fragments"),Object(o.b)("p",null,"A key advantage of GraphQL is the tree-like nature of the response data, which in many cases mirrors your rendered component hierarchy. This, combined with GraphQL's support for fragments, allows you to split your queries up in such a way that the various fields fetched by the queries are located right alongside the code that uses the field."),Object(o.b)("p",null,"Although this technique doesn't always make sense (for instance it's not always the case that the GraphQL schema is driven by the UI requirements), when it does, it's possible to use some patterns in Apollo client to take full advantage of it."),Object(o.b)("p",null,"Imagine this view hierarchy:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-text"},"FeedPage\n\u2514\u2500\u2500 Feed\n    \u2514\u2500\u2500 FeedEntry\n        \u251c\u2500\u2500 RepoInfo\n        \u2514\u2500\u2500 VoteButtons\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"FeedPage")," conducts a query to fetch a list of ",Object(o.b)("inlineCode",{parentName:"p"},"Entry"),"s, and each of the subcomponents requires different subfields of each ",Object(o.b)("inlineCode",{parentName:"p"},"Entry"),"."),Object(o.b)("h3",{id:"creating-fragments"},"Creating Fragments"),Object(o.b)("p",null,"To create the fragments, we again use the ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," helper and attach to subfields of ",Object(o.b)("inlineCode",{parentName:"p"},"ComponentClass.fragments"),", for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"VoteButtons.fragments = {\n  entry: gql`\n    fragment VoteButtons on Entry {\n      score\n      vote {\n        vote_value\n      }\n    }\n  `,\n};\n")),Object(o.b)("p",null,"If our fragments include sub-fragments then we can pass them into the ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," helper:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"FeedEntry.fragments = {\n  entry: gql`\n    fragment FeedEntry on Entry {\n      commentCount\n      repository {\n        full_name\n        html_url\n        owner {\n          avatar_url\n        }\n      }\n      ...VoteButtons\n      ...RepoInfo\n    }\n    ${VoteButtons.fragments.entry}\n    ${RepoInfo.fragments.entry}\n  `,\n};\n")),Object(o.b)("h3",{id:"importing-fragments-when-using-webpack"},"Importing fragments when using Webpack"),Object(o.b)("p",null,"When loading ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," files with ",Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@graphql-tools/webpack-loader"},"@graphql-tools/webpack-loader"),", we can include fragments using ",Object(o.b)("inlineCode",{parentName:"p"},"import")," statements. For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},'#import "./someFragment.graphql"\n')),Object(o.b)("p",null,"Will make the contents of ",Object(o.b)("inlineCode",{parentName:"p"},"someFragment.graphql")," available to the current file. See the ",Object(o.b)("a",{parentName:"p",href:"/docs/recipes/webpack#fragments"},"Webpack Fragments")," section for additional details."),Object(o.b)("h3",{id:"using-fragments-with-unions-and-interfaces"},"Using fragments with unions and interfaces"),Object(o.b)("p",null,"You can define fragments on unions and interfaces."),Object(o.b)("p",null,"Here's an example of a query that includes three in-line fragments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"query AllCharacters {\n  all_characters {\n    ... on Character {\n      name\n    }\n\n    ... on Jedi {\n      side\n    }\n\n    ... on Droid {\n      model\n    }\n  }\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"all_characters")," query above returns a list of ",Object(o.b)("inlineCode",{parentName:"p"},"Character")," objects. The ",Object(o.b)("inlineCode",{parentName:"p"},"Character")," type is an interface that both the ",Object(o.b)("inlineCode",{parentName:"p"},"Jedi")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Droid")," types implement. Each item in the list includes a ",Object(o.b)("inlineCode",{parentName:"p"},"side")," field if it's an object of type ",Object(o.b)("inlineCode",{parentName:"p"},"Jedi"),", and it includes a ",Object(o.b)("inlineCode",{parentName:"p"},"model")," field if it's of type ",Object(o.b)("inlineCode",{parentName:"p"},"Droid"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"However"),", for this query to work, your client needs to understand the polymorphic relationship between the ",Object(o.b)("inlineCode",{parentName:"p"},"Character")," interface and the types that implement it. To inform the client about these relationships, you can pass a ",Object(o.b)("inlineCode",{parentName:"p"},"possibleTypes")," option when creating the ",Object(o.b)("inlineCode",{parentName:"p"},"InMemoryCache"),"."),Object(o.b)("h3",{id:"defining-possibletypes-manually"},"Defining ",Object(o.b)("inlineCode",{parentName:"h3"},"possibleTypes")," manually"),Object(o.b)("p",null,"You can pass a ",Object(o.b)("inlineCode",{parentName:"p"},"possibleTypes")," option to the ",Object(o.b)("inlineCode",{parentName:"p"},"InMemoryCache")," constructor to specify supertype-subtype relationships in your schema. This object maps the name of an interface or union type (the supertype) to the types that implement or belong to it (the subtypes)."),Object(o.b)("p",null,"Here's an example ",Object(o.b)("inlineCode",{parentName:"p"},"possibleTypes")," declaration:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const cache = new InMemoryCache({\n  possibleTypes: {\n    Character: ['Jedi', 'Droid'],\n    Test: ['PassingTest', 'FailingTest', 'SkippedTest'],\n    Snake: ['Viper', 'Python'],\n  },\n});\n")),Object(o.b)("p",null,"This example lists three interfaces (",Object(o.b)("inlineCode",{parentName:"p"},"Character"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Test"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"Snake"),") and the object types that implement them."),Object(o.b)("h3",{id:"auto-generating-possibletypes"},"Auto-generating ",Object(o.b)("inlineCode",{parentName:"h3"},"possibleTypes")),Object(o.b)("p",null,"If your schema includes only a few unions and interfaces, you can probably specify your ",Object(o.b)("inlineCode",{parentName:"p"},"possibleTypes")," manually without issue. However, as your schema grows in size and complexity, you should consider ",Object(o.b)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/docs/plugins/fragment-matcher#usage-with-apollo-client-3"},"generating ",Object(o.b)("inlineCode",{parentName:"a"},"possibleTypes")," automatically from your schema"),"."),Object(o.b)("p",null,"Here's an example of using ",Object(o.b)("inlineCode",{parentName:"p"},"possibleTypes")," declaration generated by GraphQL Codegen:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"// generated by Fragment Matcher plugin\nimport { possibleTypes } from '../possible-types';\n\nconst cache = new InMemoryCache({ possibleTypes });\n")))}m.isMDXComponent=!0},250:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),c=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,d=m["".concat(i,".").concat(u)]||m[u]||b[u]||o;return t?r.a.createElement(d,s(s({ref:n},p),{},{components:t})):r.a.createElement(d,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);